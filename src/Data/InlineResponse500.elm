{-
   Persona
   KSF Media unified login service

   The version of the OpenAPI document: 1.3.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.InlineResponse500 exposing (InlineResponse500, HttpStatus(..), decoder, encode)

import Data.InlineResponse500InternalServerError as InlineResponse500InternalServerError exposing (InlineResponse500InternalServerError)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias InlineResponse500 =
    { httpStatus : Maybe (HttpStatus)
    , internalServerError : Maybe (InlineResponse500InternalServerError)
    , httpCode : Maybe (Int)
    }


type HttpStatus
    = InternalServerError



decoder : Decoder InlineResponse500
decoder =
    Decode.succeed InlineResponse500
        |> optional "http_status" (Decode.nullable httpStatusDecoder) Nothing
        |> optional "internal_server_error" (Decode.nullable InlineResponse500InternalServerError.decoder) Nothing
        |> optional "http_code" (Decode.nullable Decode.int) Nothing



encode : InlineResponse500 -> Encode.Value
encode model =
    Encode.object
        [ ( "http_status", Maybe.withDefault Encode.null (Maybe.map encodeHttpStatus model.httpStatus) )
        , ( "internal_server_error", Maybe.withDefault Encode.null (Maybe.map InlineResponse500InternalServerError.encode model.internalServerError) )
        , ( "http_code", Maybe.withDefault Encode.null (Maybe.map Encode.int model.httpCode) )

        ]



httpStatusDecoder : Decoder HttpStatus
httpStatusDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "Internal server error" ->
                        Decode.succeed InternalServerError

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeHttpStatus : HttpStatus -> Encode.Value
encodeHttpStatus model =
    case model of
        InternalServerError ->
            Encode.string "Internal server error"



