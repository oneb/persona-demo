{-
   Persona
   KSF Media unified login service

   The version of the OpenAPI document: 1.3.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.InlineResponse403 exposing (InlineResponse403, HttpStatus(..), decoder, encode)

import Data.InlineResponse403InvalidCredentials as InlineResponse403InvalidCredentials exposing (InlineResponse403InvalidCredentials)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias InlineResponse403 =
    { httpStatus : Maybe (HttpStatus)
    , httpCode : Maybe (Int)
    , invalidCredentials : Maybe (InlineResponse403InvalidCredentials)
    }


type HttpStatus
    = Forbidden



decoder : Decoder InlineResponse403
decoder =
    Decode.succeed InlineResponse403
        |> optional "http_status" (Decode.nullable httpStatusDecoder) Nothing
        |> optional "http_code" (Decode.nullable Decode.int) Nothing
        |> optional "invalid_credentials" (Decode.nullable InlineResponse403InvalidCredentials.decoder) Nothing



encode : InlineResponse403 -> Encode.Value
encode model =
    Encode.object
        [ ( "http_status", Maybe.withDefault Encode.null (Maybe.map encodeHttpStatus model.httpStatus) )
        , ( "http_code", Maybe.withDefault Encode.null (Maybe.map Encode.int model.httpCode) )
        , ( "invalid_credentials", Maybe.withDefault Encode.null (Maybe.map InlineResponse403InvalidCredentials.encode model.invalidCredentials) )

        ]



httpStatusDecoder : Decoder HttpStatus
httpStatusDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "Forbidden" ->
                        Decode.succeed Forbidden

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeHttpStatus : HttpStatus -> Encode.Value
encodeHttpStatus model =
    case model of
        Forbidden ->
            Encode.string "Forbidden"



