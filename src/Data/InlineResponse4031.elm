{-
   Persona
   KSF Media unified login service

   The version of the OpenAPI document: 1.3.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.InlineResponse4031 exposing (InlineResponse4031, HttpStatus(..), decoder, encode)

import Data.InlineResponse4031AccessTokenExpired as InlineResponse4031AccessTokenExpired exposing (InlineResponse4031AccessTokenExpired)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias InlineResponse4031 =
    { accessTokenExpired : Maybe (InlineResponse4031AccessTokenExpired)
    , httpStatus : Maybe (HttpStatus)
    , httpCode : Maybe (Int)
    }


type HttpStatus
    = Forbidden



decoder : Decoder InlineResponse4031
decoder =
    Decode.succeed InlineResponse4031
        |> optional "access_token_expired" (Decode.nullable InlineResponse4031AccessTokenExpired.decoder) Nothing
        |> optional "http_status" (Decode.nullable httpStatusDecoder) Nothing
        |> optional "http_code" (Decode.nullable Decode.int) Nothing



encode : InlineResponse4031 -> Encode.Value
encode model =
    Encode.object
        [ ( "access_token_expired", Maybe.withDefault Encode.null (Maybe.map InlineResponse4031AccessTokenExpired.encode model.accessTokenExpired) )
        , ( "http_status", Maybe.withDefault Encode.null (Maybe.map encodeHttpStatus model.httpStatus) )
        , ( "http_code", Maybe.withDefault Encode.null (Maybe.map Encode.int model.httpCode) )

        ]



httpStatusDecoder : Decoder HttpStatus
httpStatusDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "Forbidden" ->
                        Decode.succeed Forbidden

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeHttpStatus : HttpStatus -> Encode.Value
encodeHttpStatus model =
    case model of
        Forbidden ->
            Encode.string "Forbidden"



