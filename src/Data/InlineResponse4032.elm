{-
   Persona
   KSF Media unified login service

   The version of the OpenAPI document: 1.3.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.InlineResponse4032 exposing (InlineResponse4032, HttpStatus(..), decoder, encode)

import Data.InlineResponse4032OauthFailed as InlineResponse4032OauthFailed exposing (InlineResponse4032OauthFailed)
import Data.InlineResponse4032EmailNotAuthorized as InlineResponse4032EmailNotAuthorized exposing (InlineResponse4032EmailNotAuthorized)
import Data.InlineResponse4032EmailAddressInUse as InlineResponse4032EmailAddressInUse exposing (InlineResponse4032EmailAddressInUse)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias InlineResponse4032 =
    { oauthFailed : Maybe (InlineResponse4032OauthFailed)
    , httpStatus : Maybe (HttpStatus)
    , emailNotAuthorized : Maybe (InlineResponse4032EmailNotAuthorized)
    , emailAddressInUse : Maybe (InlineResponse4032EmailAddressInUse)
    , httpCode : Maybe (Int)
    }


type HttpStatus
    = Forbidden



decoder : Decoder InlineResponse4032
decoder =
    Decode.succeed InlineResponse4032
        |> optional "oauth_failed" (Decode.nullable InlineResponse4032OauthFailed.decoder) Nothing
        |> optional "http_status" (Decode.nullable httpStatusDecoder) Nothing
        |> optional "email_not_authorized" (Decode.nullable InlineResponse4032EmailNotAuthorized.decoder) Nothing
        |> optional "email_address_in_use" (Decode.nullable InlineResponse4032EmailAddressInUse.decoder) Nothing
        |> optional "http_code" (Decode.nullable Decode.int) Nothing



encode : InlineResponse4032 -> Encode.Value
encode model =
    Encode.object
        [ ( "oauth_failed", Maybe.withDefault Encode.null (Maybe.map InlineResponse4032OauthFailed.encode model.oauthFailed) )
        , ( "http_status", Maybe.withDefault Encode.null (Maybe.map encodeHttpStatus model.httpStatus) )
        , ( "email_not_authorized", Maybe.withDefault Encode.null (Maybe.map InlineResponse4032EmailNotAuthorized.encode model.emailNotAuthorized) )
        , ( "email_address_in_use", Maybe.withDefault Encode.null (Maybe.map InlineResponse4032EmailAddressInUse.encode model.emailAddressInUse) )
        , ( "http_code", Maybe.withDefault Encode.null (Maybe.map Encode.int model.httpCode) )

        ]



httpStatusDecoder : Decoder HttpStatus
httpStatusDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "Forbidden" ->
                        Decode.succeed Forbidden

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeHttpStatus : HttpStatus -> Encode.Value
encodeHttpStatus model =
    case model of
        Forbidden ->
            Encode.string "Forbidden"



