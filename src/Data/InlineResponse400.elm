{-
   Persona
   KSF Media unified login service

   The version of the OpenAPI document: 1.3.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.InlineResponse400 exposing (InlineResponse400, HttpStatus(..), decoder, encode)

import Data.InlineResponse400InvalidRequestBody as InlineResponse400InvalidRequestBody exposing (InlineResponse400InvalidRequestBody)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias InlineResponse400 =
    { httpStatus : Maybe (HttpStatus)
    , httpCode : Maybe (Int)
    , invalidRequestBody : Maybe (InlineResponse400InvalidRequestBody)
    }


type HttpStatus
    = BadRequest



decoder : Decoder InlineResponse400
decoder =
    Decode.succeed InlineResponse400
        |> optional "http_status" (Decode.nullable httpStatusDecoder) Nothing
        |> optional "http_code" (Decode.nullable Decode.int) Nothing
        |> optional "invalid_request_body" (Decode.nullable InlineResponse400InvalidRequestBody.decoder) Nothing



encode : InlineResponse400 -> Encode.Value
encode model =
    Encode.object
        [ ( "http_status", Maybe.withDefault Encode.null (Maybe.map encodeHttpStatus model.httpStatus) )
        , ( "http_code", Maybe.withDefault Encode.null (Maybe.map Encode.int model.httpCode) )
        , ( "invalid_request_body", Maybe.withDefault Encode.null (Maybe.map InlineResponse400InvalidRequestBody.encode model.invalidRequestBody) )

        ]



httpStatusDecoder : Decoder HttpStatus
httpStatusDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "Bad request" ->
                        Decode.succeed BadRequest

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeHttpStatus : HttpStatus -> Encode.Value
encodeHttpStatus model =
    case model of
        BadRequest ->
            Encode.string "Bad request"



