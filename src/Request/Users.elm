{-
   Persona
   KSF Media unified login service

   The version of the OpenAPI document: 1.3.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.Users exposing (usersPost, usersUuidEntitlementGet, usersUuidGdprPut, usersUuidGet, usersUuidLegalPut, usersUuidPatch, usersUuidSubscriptionsSubsnoAddressChangePost, usersUuidSubscriptionsSubsnoPausePost)

import Data.LegalConsent as LegalConsent exposing (LegalConsent)
import Data.LoginResponse as LoginResponse exposing (LoginResponse)
import Data.User as User exposing (User)
import Data.SubscriptionPauseDates as SubscriptionPauseDates exposing (SubscriptionPauseDates)
import Data.UserUpdate as UserUpdate exposing (UserUpdate)
import Data.TemporaryAddressChange as TemporaryAddressChange exposing (TemporaryAddressChange)
import Data.GdprConsent as GdprConsent exposing (GdprConsent)
import Data.InlineResponse400 as InlineResponse400 exposing (InlineResponse400)
import Data.Subscription as Subscription exposing (Subscription)
import Data.NewUser as NewUser exposing (NewUser)
import Data.InlineResponse415 as InlineResponse415 exposing (InlineResponse415)
import Uuid exposing (Uuid)
import Dict
import Http
import Json.Decode as Decode
import Url.Builder as Url




basePath : String
basePath =
    "https://persona.api.ksfmedia.fi/v1"


usersPost :
    { onSend : Result Http.Error LoginResponse -> msg


    , body : NewUser


    }
    -> Cmd msg
usersPost params =
    Http.request
        { method = "POST"
        , headers = []
        , url = Url.crossOrigin basePath
            ["users"]
            []
        , body = Http.jsonBody <| NewUser.encode params.body
        , expect = Http.expectJson params.onSend LoginResponse.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


usersUuidEntitlementGet :
    { authorization : Maybe (String)

    , cacheControl : Maybe (String)
    } -> 
    { onSend : Result Http.Error (List String) -> msg



    , uuid : Uuid

    }
    -> Cmd msg
usersUuidEntitlementGet headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [Maybe.map (Http.header "Authorization" ) headers.authorization, Maybe.map (Http.header "Cache-Control" ) headers.cacheControl]
        , url = Url.crossOrigin basePath
            ["users",  Uuid.toString params.uuid, "entitlement"]
            []
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend (Decode.list Decode.string)
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Authorization header expects the following format ‘OAuth {token}’
-}
usersUuidGdprPut :
    { authorization : Maybe (String)
    } -> 
    { onSend : Result Http.Error User -> msg


    , body : GdprConsent
    , uuid : Uuid

    }
    -> Cmd msg
usersUuidGdprPut headers params =
    Http.request
        { method = "PUT"
        , headers = List.filterMap identity [Maybe.map (Http.header "Authorization" ) headers.authorization]
        , url = Url.crossOrigin basePath
            ["users",  Uuid.toString params.uuid, "gdpr"]
            []
        , body = Http.jsonBody <| GdprConsent.encode params.body
        , expect = Http.expectJson params.onSend User.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Authorization header expects the following format ‘OAuth {token}’
-}
usersUuidGet :
    { authorization : Maybe (String)

    , cacheControl : Maybe (String)
    } -> 
    { onSend : Result Http.Error User -> msg



    , uuid : Uuid

    }
    -> Cmd msg
usersUuidGet headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [Maybe.map (Http.header "Authorization" ) headers.authorization, Maybe.map (Http.header "Cache-Control" ) headers.cacheControl]
        , url = Url.crossOrigin basePath
            ["users",  Uuid.toString params.uuid]
            []
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend User.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Authorization header expects the following format ‘OAuth {token}’
-}
usersUuidLegalPut :
    { authorization : Maybe (String)
    } -> 
    { onSend : Result Http.Error User -> msg


    , body : LegalConsent
    , uuid : Uuid

    }
    -> Cmd msg
usersUuidLegalPut headers params =
    Http.request
        { method = "PUT"
        , headers = List.filterMap identity [Maybe.map (Http.header "Authorization" ) headers.authorization]
        , url = Url.crossOrigin basePath
            ["users",  Uuid.toString params.uuid, "legal"]
            []
        , body = Http.jsonBody <| LegalConsent.encode params.body
        , expect = Http.expectJson params.onSend User.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Authorization header expects the following format ‘OAuth {token}’
-}
usersUuidPatch :
    { authorization : Maybe (String)
    } -> 
    { onSend : Result Http.Error User -> msg


    , body : UserUpdate
    , uuid : Uuid

    }
    -> Cmd msg
usersUuidPatch headers params =
    Http.request
        { method = "PATCH"
        , headers = List.filterMap identity [Maybe.map (Http.header "Authorization" ) headers.authorization]
        , url = Url.crossOrigin basePath
            ["users",  Uuid.toString params.uuid]
            []
        , body = Http.jsonBody <| UserUpdate.encode params.body
        , expect = Http.expectJson params.onSend User.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


usersUuidSubscriptionsSubsnoAddressChangePost :
    { authorization : Maybe (String)
    } -> 
    { onSend : Result Http.Error Subscription -> msg


    , body : TemporaryAddressChange
    , uuid : Uuid    , subsno : Int

    }
    -> Cmd msg
usersUuidSubscriptionsSubsnoAddressChangePost headers params =
    Http.request
        { method = "POST"
        , headers = List.filterMap identity [Maybe.map (Http.header "Authorization" ) headers.authorization]
        , url = Url.crossOrigin basePath
            ["users",  Uuid.toString params.uuid, "subscriptions",  String.fromInt params.subsno, "addressChange"]
            []
        , body = Http.jsonBody <| TemporaryAddressChange.encode params.body
        , expect = Http.expectJson params.onSend Subscription.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


usersUuidSubscriptionsSubsnoPausePost :
    { authorization : Maybe (String)
    } -> 
    { onSend : Result Http.Error Subscription -> msg


    , body : SubscriptionPauseDates
    , uuid : Uuid    , subsno : Int

    }
    -> Cmd msg
usersUuidSubscriptionsSubsnoPausePost headers params =
    Http.request
        { method = "POST"
        , headers = List.filterMap identity [Maybe.map (Http.header "Authorization" ) headers.authorization]
        , url = Url.crossOrigin basePath
            ["users",  Uuid.toString params.uuid, "subscriptions",  String.fromInt params.subsno, "pause"]
            []
        , body = Http.jsonBody <| SubscriptionPauseDates.encode params.body
        , expect = Http.expectJson params.onSend Subscription.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }
