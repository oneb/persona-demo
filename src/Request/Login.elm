{-
   Persona
   KSF Media unified login service

   The version of the OpenAPI document: 1.3.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.Login exposing (loginPost, loginSomePost, loginSsoPost, loginUuidDelete)

import Data.LoginData as LoginData exposing (LoginData)
import Data.LoginResponse as LoginResponse exposing (LoginResponse)
import Data.LoginDataSoMe as LoginDataSoMe exposing (LoginDataSoMe)
import Data.InlineResponse4032 as InlineResponse4032 exposing (InlineResponse4032)
import Data.InlineResponse4031 as InlineResponse4031 exposing (InlineResponse4031)
import Data.InlineResponse500 as InlineResponse500 exposing (InlineResponse500)
-- import Data.Object as Object exposing (Object)
import Data.InlineResponse400 as InlineResponse400 exposing (InlineResponse400)
import Data.InlineResponse403 as InlineResponse403 exposing (InlineResponse403)
import Data.InlineResponse415 as InlineResponse415 exposing (InlineResponse415)
import Data.LoginDataSSO as LoginDataSSO exposing (LoginDataSSO)
import Uuid exposing (Uuid)
import Dict
import Http
import Json.Decode as Decode
import Url.Builder as Url




basePath : String
basePath =
    "https://persona.api.ksfmedia.fi/v1"


loginPost :
    { onSend : Result Http.Error LoginResponse -> msg


    , body : LoginData


    }
    -> Cmd msg
loginPost params =
    Http.request
        { method = "POST"
        , headers = []
        , url = Url.crossOrigin basePath
            ["login"]
            []
        , body = Http.jsonBody <| LoginData.encode params.body
        , expect = Http.expectJson params.onSend LoginResponse.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


loginSomePost :
    { onSend : Result Http.Error LoginResponse -> msg


    , body : LoginDataSoMe


    }
    -> Cmd msg
loginSomePost params =
    Http.request
        { method = "POST"
        , headers = []
        , url = Url.crossOrigin basePath
            ["login", "some"]
            []
        , body = Http.jsonBody <| LoginDataSoMe.encode params.body
        , expect = Http.expectJson params.onSend LoginResponse.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


loginSsoPost :
    { onSend : Result Http.Error LoginResponse -> msg


    , body : LoginDataSSO


    }
    -> Cmd msg
loginSsoPost params =
    Http.request
        { method = "POST"
        , headers = []
        , url = Url.crossOrigin basePath
            ["login", "sso"]
            []
        , body = Http.jsonBody <| LoginDataSSO.encode params.body
        , expect = Http.expectJson params.onSend LoginResponse.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Authorization header expects the following format ‘OAuth {token}’
-}
loginUuidDelete :
    { authorization : Maybe (String)
    } -> 
    { onSend : Result Http.Error (List String) -> msg



    , uuid : Uuid

    }
    -> Cmd msg
loginUuidDelete headers params =
    Http.request
        { method = "DELETE"
        , headers = List.filterMap identity [Maybe.map (Http.header "Authorization" ) headers.authorization]
        , url = Url.crossOrigin basePath
            ["login",  Uuid.toString params.uuid]
            []
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend (Decode.list Decode.string)
        , timeout = Just 30000
        , tracker = Nothing
        }
